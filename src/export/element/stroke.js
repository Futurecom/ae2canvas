function getStroke(data) {    if (!data) return null;    var stroke = {};    stroke.index = data.propertyIndex;    stroke.join = data.property('ADBE Vector Stroke Line Join').value;    if (stroke.join === 1) stroke.miterLimit = getProperty(data.property('ADBE Vector Stroke Miter Limit'));    stroke.join = setStrokeTypeAsString(stroke.join);    stroke.cap = data.property('ADBE Vector Stroke Line Cap').value;    stroke.cap = setCapTypeAsString(stroke.cap);    stroke.color = getProperty(data.property('ADBE Vector Stroke Color'));    stroke.color = normalizeColor(stroke.color);    stroke.color = normalizeKeyframes(stroke.color);    stroke.opacity = getProperty(data.property('ADBE Vector Stroke Opacity'));    stroke.opacity = normalizeOpacity(stroke.opacity);    stroke.opacity = normalizeKeyframes(stroke.opacity);    stroke.width = getProperty(data.property('ADBE Vector Stroke Width'));    stroke.width = normalizeKeyframes(stroke.width);    return stroke;    function setStrokeTypeAsString(number) {        switch (number) {            case 2:                return 'round';                break;            case 3:                return 'bevel';                break;            default:                return 'miter';        }    }    function setCapTypeAsString(number) {        switch (number) {            case 2:                return 'round';                break;            case 3:                return 'square'; //  AE-> projecting === Canvas -> Square                break;            default:                return 'butt';        }    }}